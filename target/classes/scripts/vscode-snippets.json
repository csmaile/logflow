{
    "LogFlow Data Filter Script": {
        "prefix": "lf-filter",
        "body": [
            "// 数据过滤脚本",
            "var config = context.get('config') || {};",
            "var data = input;",
            "var filtered = [];",
            "",
            "for (var i = 0; i < data.length; i++) {",
            "  var item = data[i];",
            "  ",
            "  // 在这里添加过滤条件",
            "  if (${1:item.level !== 'DEBUG'}) {",
            "    filtered.push(item);",
            "  }",
            "}",
            "",
            "logger.info('过滤完成: 输入' + data.length + '条，输出' + filtered.length + '条');",
            "filtered;"
        ],
        "description": "LogFlow数据过滤脚本模板"
    },
    "LogFlow Data Transform Script": {
        "prefix": "lf-transform",
        "body": [
            "// 数据转换脚本",
            "var data = input;",
            "var transformed = [];",
            "",
            "for (var i = 0; i < data.length; i++) {",
            "  var item = data[i];",
            "  ",
            "  // 转换数据",
            "  var newItem = {",
            "    id: item.id,",
            "    ${1:processedValue}: ${2:item.value * 2},",
            "    processedAt: utils.now(),",
            "    ${3:// 添加更多字段}",
            "  };",
            "  ",
            "  transformed.push(newItem);",
            "}",
            "",
            "logger.info('转换完成: 处理了' + transformed.length + '条记录');",
            "transformed;"
        ],
        "description": "LogFlow数据转换脚本模板"
    },
    "LogFlow Data Aggregation Script": {
        "prefix": "lf-aggregate",
        "body": [
            "// 数据聚合脚本",
            "var data = input;",
            "var summary = {",
            "  total: data.length,",
            "  ${1:levels}: {},",
            "  ${2:statistics}: {",
            "    ${3:min}: Number.MAX_VALUE,",
            "    ${4:max}: Number.MIN_VALUE,",
            "    ${5:average}: 0",
            "  }",
            "};",
            "",
            "var sum = 0;",
            "for (var i = 0; i < data.length; i++) {",
            "  var item = data[i];",
            "  ",
            "  // 统计分类",
            "  var key = ${6:item.level};",
            "  summary.${1:levels}[key] = (summary.${1:levels}[key] || 0) + 1;",
            "  ",
            "  // 计算统计值",
            "  var value = ${7:item.value || 0};",
            "  sum += value;",
            "  summary.${2:statistics}.${3:min} = Math.min(summary.${2:statistics}.${3:min}, value);",
            "  summary.${2:statistics}.${4:max} = Math.max(summary.${2:statistics}.${4:max}, value);",
            "}",
            "",
            "summary.${2:statistics}.${5:average} = sum / data.length;",
            "",
            "logger.info('聚合完成: 总计' + summary.total + '条记录');",
            "summary;"
        ],
        "description": "LogFlow数据聚合脚本模板"
    },
    "LogFlow Error Analysis Script": {
        "prefix": "lf-error-analysis",
        "body": [
            "// 错误分析脚本",
            "var logs = input;",
            "var errorAnalysis = {",
            "  totalLogs: logs.length,",
            "  errorCount: 0,",
            "  warningCount: 0,",
            "  errorTypes: {},",
            "  timeDistribution: {},",
            "  recommendations: []",
            "};",
            "",
            "for (var i = 0; i < logs.length; i++) {",
            "  var log = logs[i];",
            "  ",
            "  if (log.level === 'ERROR' || log.level === 'FATAL') {",
            "    errorAnalysis.errorCount++;",
            "    ",
            "    // 分析错误类型",
            "    var errorType = ${1:log.message.indexOf('Exception') >= 0 ? 'Exception' : 'Other'};",
            "    errorAnalysis.errorTypes[errorType] = (errorAnalysis.errorTypes[errorType] || 0) + 1;",
            "  } else if (log.level === 'WARN') {",
            "    errorAnalysis.warningCount++;",
            "  }",
            "  ",
            "  // 时间分布分析",
            "  var hour = new Date(log.timestamp).getHours();",
            "  errorAnalysis.timeDistribution[hour] = (errorAnalysis.timeDistribution[hour] || 0) + 1;",
            "}",
            "",
            "// 生成建议",
            "var errorRate = (errorAnalysis.errorCount / errorAnalysis.totalLogs * 100).toFixed(2);",
            "if (errorAnalysis.errorCount > 10) {",
            "  errorAnalysis.recommendations.push('错误数量较多(' + errorAnalysis.errorCount + '个)，建议立即检查');",
            "}",
            "if (errorRate > 5) {",
            "  errorAnalysis.recommendations.push('错误率(' + errorRate + '%)较高，需要关注');",
            "}",
            "",
            "logger.info('错误分析完成: 发现' + errorAnalysis.errorCount + '个错误，错误率' + errorRate + '%');",
            "errorAnalysis;"
        ],
        "description": "LogFlow错误分析脚本模板"
    },
    "LogFlow Performance Analysis Script": {
        "prefix": "lf-performance",
        "body": [
            "// 性能分析脚本",
            "var data = input;",
            "var performanceAnalysis = {",
            "  totalRequests: data.length,",
            "  slowRequests: 0,",
            "  ${1:averageResponseTime}: 0,",
            "  ${2:maxResponseTime}: 0,",
            "  ${3:minResponseTime}: Number.MAX_VALUE,",
            "  ${4:responseTimeDistribution}: {",
            "    'fast': 0,      // < 100ms",
            "    'normal': 0,    // 100ms - 1000ms",
            "    'slow': 0,      // 1000ms - 5000ms",
            "    'very_slow': 0  // > 5000ms",
            "  }",
            "};",
            "",
            "var totalTime = 0;",
            "var slowThreshold = ${5:1000}; // 慢请求阈值(ms)",
            "",
            "for (var i = 0; i < data.length; i++) {",
            "  var item = data[i];",
            "  var responseTime = ${6:item.responseTime || item.duration || 0};",
            "  ",
            "  totalTime += responseTime;",
            "  performanceAnalysis.${2:maxResponseTime} = Math.max(performanceAnalysis.${2:maxResponseTime}, responseTime);",
            "  performanceAnalysis.${3:minResponseTime} = Math.min(performanceAnalysis.${3:minResponseTime}, responseTime);",
            "  ",
            "  if (responseTime > slowThreshold) {",
            "    performanceAnalysis.slowRequests++;",
            "  }",
            "  ",
            "  // 响应时间分布",
            "  if (responseTime < 100) {",
            "    performanceAnalysis.${4:responseTimeDistribution}.fast++;",
            "  } else if (responseTime < 1000) {",
            "    performanceAnalysis.${4:responseTimeDistribution}.normal++;",
            "  } else if (responseTime < 5000) {",
            "    performanceAnalysis.${4:responseTimeDistribution}.slow++;",
            "  } else {",
            "    performanceAnalysis.${4:responseTimeDistribution}.very_slow++;",
            "  }",
            "}",
            "",
            "performanceAnalysis.${1:averageResponseTime} = Math.round(totalTime / data.length);",
            "",
            "logger.info('性能分析完成: 平均响应时间' + performanceAnalysis.${1:averageResponseTime} + 'ms，慢请求' + performanceAnalysis.slowRequests + '个');",
            "performanceAnalysis;"
        ],
        "description": "LogFlow性能分析脚本模板"
    },
    "LogFlow Context Operations": {
        "prefix": "lf-context",
        "body": [
            "// 上下文操作脚本",
            "// 获取配置和数据",
            "var config = context.get('${1:config}') || {};",
            "var previousData = context.get('${2:previous_result}');",
            "var data = input;",
            "",
            "// 处理数据",
            "var result = {",
            "  workflowId: context.getWorkflowId(),",
            "  executionId: context.getExecutionId(),",
            "  processedAt: utils.now(),",
            "  ${3:data}: data,",
            "  ${4:config}: config",
            "};",
            "",
            "// 设置统计信息到上下文",
            "context.set('${5:processing_stats}', {",
            "  inputCount: data.length,",
            "  processedAt: utils.now(),",
            "  ${6:additionalInfo}: '${7:value}'",
            "});",
            "",
            "logger.info('上下文操作完成');",
            "result;"
        ],
        "description": "LogFlow上下文操作脚本模板"
    },
    "LogFlow Report Generator": {
        "prefix": "lf-report",
        "body": [
            "// 报告生成脚本",
            "var ${1:primaryData} = input;",
            "var ${2:secondaryData} = context.get('${3:secondary_result}');",
            "var ${4:config} = context.get('config') || {};",
            "",
            "// 生成综合报告",
            "var report = {",
            "  metadata: {",
            "    generatedAt: utils.now(),",
            "    workflowId: context.getWorkflowId(),",
            "    executionId: context.getExecutionId(),",
            "    version: '${5:1.0.0}'",
            "  },",
            "  summary: {",
            "    ${6:totalItems}: ${1:primaryData}.length,",
            "    ${7:processedItems}: 0,",
            "    ${8:issueCount}: 0",
            "  },",
            "  details: {",
            "    ${9:primary}: ${1:primaryData},",
            "    ${10:secondary}: ${2:secondaryData}",
            "  },",
            "  recommendations: []",
            "};",
            "",
            "// 计算统计信息",
            "// 在这里添加分析逻辑",
            "",
            "// 生成建议",
            "if (report.summary.${8:issueCount} > 0) {",
            "  report.recommendations.push('发现 ' + report.summary.${8:issueCount} + ' 个问题，建议检查');",
            "} else {",
            "  report.recommendations.push('系统运行正常');",
            "}",
            "",
            "logger.info('报告生成完成: ' + JSON.stringify(report.summary));",
            "report;"
        ],
        "description": "LogFlow报告生成脚本模板"
    }
}