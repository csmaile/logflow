# yaml-language-server: $schema=../schemas/logflow-workflow-schema.json
# 复杂日志分析工作流配置
workflow:
  id: "complex_log_analysis_yaml"
  name: "复杂日志分析（YAML配置）"
  description: "包含数据预处理、多重诊断和结果聚合的复杂工作流"
  version: "2.0.0"
  author: "LogFlow Advanced Team"
  metadata:
    category: "高级日志分析"
    tags: ["数据预处理", "多重诊断", "脚本处理"]
    complexity: "high"

# 全局配置
globalConfig:
  timeout: 60000
  retryCount: 5
  logLevel: "DEBUG"
  enableMetrics: true

# 节点定义
nodes:
  # 配置输入节点
  - id: "config_input"
    name: "分析配置输入"
    type: "input"
    enabled: true
    position:
      x: 50
      y: 50
    config:
      inputKey: "analysis_config"
      outputKey: "config"
      dataType: "object"

  # 日志数据源
  - id: "log_data_source"
    name: "日志文件数据源"
    type: "datasource"
    enabled: true
    position:
      x: 50
      y: 150
    config:
      sourceType: "mock"
      mockType: "mixed_logs"
      count: 500
      outputKey: "raw_logs"

  # 数据预处理脚本
  - id: "data_preprocessor"
    name: "数据预处理器"
    type: "script"
    enabled: true
    position:
      x: 250
      y: 150
    config:
      scriptEngine: "javascript"
      inputKey: "raw_logs"
      outputKey: "filtered_logs"
      script: |
        var config = context.get('config');
        var logs = input;
        var filtered = [];
        var errorCount = 0;
        
        for (var i = 0; i < logs.length; i++) {
          var log = logs[i];
          
          // 根据配置过滤日志级别
          if (config && config.minLevel) {
            var levels = ['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL'];
            var minIndex = levels.indexOf(config.minLevel);
            var logIndex = levels.indexOf(log.level);
            if (logIndex < minIndex) {
              continue;
            }
          }
          
          // 统计错误数量
          if (log.level === 'ERROR' || log.level === 'FATAL') {
            errorCount++;
          }
          
          // 添加时间戳解析
          log.parsedTime = new Date(log.timestamp);
          log.hour = log.parsedTime.getHours();
          
          filtered.push(log);
        }
        
        // 设置统计信息到上下文
        context.set('preprocessing_stats', {
          totalInput: logs.length,
          totalOutput: filtered.length,
          errorCount: errorCount,
          filterRate: ((logs.length - filtered.length) / logs.length * 100).toFixed(2)
        });
        
        logger.info('数据预处理完成: 输入' + logs.length + '条，输出' + filtered.length + '条，错误' + errorCount + '条');
        filtered;

  # 错误检测
  - id: "error_diagnosis"
    name: "错误诊断"
    type: "diagnosis"
    enabled: true
    position:
      x: 450
      y: 100
    config:
      diagnosisType: "error_detection"
      inputKey: "filtered_logs"
      outputKey: "error_results"
      errorPatterns: ["ERROR", "FATAL", "Exception", "Timeout", "Failed"]

  # 性能分析
  - id: "performance_diagnosis"
    name: "性能诊断"
    type: "diagnosis"
    enabled: true
    position:
      x: 450
      y: 200
    config:
      diagnosisType: "performance_analysis"
      inputKey: "filtered_logs"
      outputKey: "performance_results"
      slowThreshold: 1000.0

  # 模式分析
  - id: "pattern_diagnosis"
    name: "模式分析"
    type: "diagnosis"
    enabled: true
    position:
      x: 450
      y: 300
    config:
      diagnosisType: "pattern_analysis"
      inputKey: "filtered_logs"
      outputKey: "pattern_results"

  # 异常检测
  - id: "anomaly_diagnosis"
    name: "异常检测"
    type: "diagnosis"
    enabled: true
    position:
      x: 450
      y: 400
    config:
      diagnosisType: "anomaly_detection"
      inputKey: "filtered_logs"
      outputKey: "anomaly_results"

  # 结果聚合脚本
  - id: "result_aggregator"
    name: "结果聚合器"
    type: "script"
    enabled: true
    position:
      x: 650
      y: 250
    config:
      scriptEngine: "javascript"
      inputKey: "error_results"
      outputKey: "final_report"
      script: |
        var errorResults = context.get('error_results');
        var performanceResults = context.get('performance_results');
        var patternResults = context.get('pattern_results');
        var anomalyResults = context.get('anomaly_results');
        var preprocessingStats = context.get('preprocessing_stats');
        
        // 计算总体风险评分
        var riskScore = 0;
        if (errorResults.issueCount > 10) riskScore += 30;
        else if (errorResults.issueCount > 5) riskScore += 20;
        else if (errorResults.issueCount > 0) riskScore += 10;
        
        if (performanceResults.issueCount > 5) riskScore += 25;
        else if (performanceResults.issueCount > 0) riskScore += 10;
        
        if (anomalyResults.issueCount > 3) riskScore += 20;
        else if (anomalyResults.issueCount > 0) riskScore += 10;
        
        // 确定风险级别
        var riskLevel = 'LOW';
        if (riskScore >= 50) riskLevel = 'CRITICAL';
        else if (riskScore >= 30) riskLevel = 'HIGH';
        else if (riskScore >= 15) riskLevel = 'MEDIUM';
        
        var report = {
          timestamp: utils.now(),
          summary: {
            riskScore: riskScore,
            riskLevel: riskLevel,
            totalIssues: errorResults.issueCount + performanceResults.issueCount + 
                        patternResults.issueCount + anomalyResults.issueCount,
            preprocessing: preprocessingStats
          },
          diagnostics: {
            errors: {
              count: errorResults.issueCount,
              severity: errorResults.maxSeverity,
              issues: errorResults.issues
            },
            performance: {
              count: performanceResults.issueCount,
              severity: performanceResults.maxSeverity,
              issues: performanceResults.issues
            },
            patterns: {
              count: patternResults.issueCount,
              findings: patternResults.issues
            },
            anomalies: {
              count: anomalyResults.issueCount,
              findings: anomalyResults.issues
            }
          },
          recommendations: []
        };
        
        // 生成建议
        if (errorResults.issueCount > 10) {
          report.recommendations.push('系统错误率较高，建议立即检查日志并修复相关问题');
        }
        if (performanceResults.issueCount > 5) {
          report.recommendations.push('发现多个性能问题，建议优化响应时间');
        }
        if (anomalyResults.issueCount > 0) {
          report.recommendations.push('检测到异常模式，建议进一步调查');
        }
        if (report.recommendations.length === 0) {
          report.recommendations.push('系统运行正常，继续监控');
        }
        
        logger.info('生成综合分析报告: 风险等级=' + riskLevel + ', 总问题数=' + report.summary.totalIssues);
        report;

  # JSON报告输出
  - id: "json_report_output"
    name: "JSON报告输出"
    type: "output"
    enabled: true
    position:
      x: 850
      y: 200
    config:
      inputKey: "final_report"
      outputType: "json"
      filePath: "complex_analysis_report.json"

  # 控制台摘要输出
  - id: "console_summary"
    name: "控制台摘要"
    type: "output"
    enabled: true
    position:
      x: 850
      y: 300
    config:
      inputKey: "final_report"
      outputType: "console"
      format: "text"

# 连接关系
connections:
  # 配置输入到数据源
  - from: "config_input"
    to: "log_data_source"
    enabled: true

  # 数据源到预处理
  - from: "log_data_source"
    to: "data_preprocessor"
    enabled: true

  # 预处理到各个诊断节点
  - from: "data_preprocessor"
    to: "error_diagnosis"
    enabled: true

  - from: "data_preprocessor"
    to: "performance_diagnosis"
    enabled: true

  - from: "data_preprocessor"
    to: "pattern_diagnosis"
    enabled: true

  - from: "data_preprocessor"
    to: "anomaly_diagnosis"
    enabled: true

  # 所有诊断结果到聚合器
  - from: "error_diagnosis"
    to: "result_aggregator"
    enabled: true

  - from: "performance_diagnosis"
    to: "result_aggregator"
    enabled: true

  - from: "pattern_diagnosis"
    to: "result_aggregator"
    enabled: true

  - from: "anomaly_diagnosis"
    to: "result_aggregator"
    enabled: true

  # 聚合结果到输出
  - from: "result_aggregator"
    to: "json_report_output"
    enabled: true

  - from: "result_aggregator"
    to: "console_summary"
    enabled: true
